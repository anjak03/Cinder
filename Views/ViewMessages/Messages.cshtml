@model List<Cinder.Models.Match>

@{
    ViewData["Title"] = "Contact your matches!";
    var hasMatches = Model.Count > 0; 
}

@if (@Model.Count != 0)
{
    <section id="msgIntro">
        <h1>@ViewData["Title"]</h1>
        <p>Here you can see all of the users you (@Model[0].User1.UserName) matched with and they accepted your request.</p>
    </section>
}

<section id="messaging-system">
    <div class="main-container">
        <div class="contact-messages-container">
            <ul class="navigation">

                @if (@Model.Count > 0 && @Model[0].User1.MatchedUsers != null && @Model[0].User1.MatchedUsers.Count > 0)
                {
                    @foreach (var user in @Model)
                    {
                        var matchedUser = user.User2;

                        <li class="user-info" user-id="@matchedUser.Id" onclick="openChat('@matchedUser.Id')">
                            <div class="user-name">@matchedUser.FirstName @matchedUser.LastName</div>
                            <p class="user-top-message">@matchedUser.Faculty</p>
                        </li>
                    }
                }
                else
                {
                    <p>No matched users found...</p>
                }

            </ul><!-- navigacija -->

            <div class="messaging-space">

                <div id="messagesList" class="messagesList">


                </div><!-- end messagesList -->

                <div class="newMessageArea">
                    <input type="text" id="messageInput" placeholder="Type a message...">
                    <button onclick="sendMessage()">Send</button>
                </div><!-- end newMessageArea -->

            </div><!-- end messaging-space -->

        </div><!-- end contact-messages-container -->

    </div><!-- end container -->
</section>


@section Scripts {
    <script src="~/lib/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        function addMessageToDOM(message, isSent) {
            const messagesList = document.getElementById("messagesList");
            var msg = document.createElement("div");
            msg.textContent = message;
            msg.className = isSent ? 'sent-message' : 'received-message';
            messagesList.appendChild(msg);
        }

        connection.on("ReceiveMessage", function (user, message) {
            addMessageToDOM(message, false);
        });

        connection.start().then(function () {
            console.log("SignalR Connected.");
        }).catch(function (err) {
            console.error("SignalR Connection error: ", err.toString());
        });

        function sendMessage() {
            const receiverUserId = document.querySelector('.user-info.active-chat').getAttribute('user-id');
            const messageContent = document.getElementById("messageInput").value.trim();

            if (messageContent === '') {
                return; // Don't send empty messages
            }

            connection.invoke("SendMessageToUser", receiverUserId, messageContent)
                .catch(function (err) {
                    return console.error(err.toString());
                });

            addMessageToDOM(messageContent, true);
            document.getElementById("messageInput").value = '';
        }

        document.getElementById("messageInput").addEventListener("keyup", function (event) {
            if (event.key === "Enter") {
                event.preventDefault(); 
                sendMessage();
            }
        });

         @if (hasMatches) {
            <text>
            const currentUserID = '@Model[0].User1.Id';  

            function openChat(userId) {
                // Deselect any previously selected chat
                document.querySelectorAll('.user-info.active-chat').forEach(user => {
                    user.classList.remove('active-chat');
                });

                document.querySelector(`li[user-id='${userId}']`).classList.add('active-chat');

                fetch(`/api/messages/history/${userId}`)
                    .then(response => response.json())
                    .then(messages => {
                        const messagesList = document.getElementById("messagesList");
                        messagesList.innerHTML = '';

                        messages.forEach(message => {
                            var msg = document.createElement("div");
                            msg.textContent = message.content;

                            msg.className = message.senderId === currentUserID ? 'sent-message' : 'received-message';

                            messagesList.appendChild(msg);
                        });
                    })
                    .catch(error => {
                        console.error("Error fetching chat history:", error);
                    });
            }
            </text>
        }
    </script>
}